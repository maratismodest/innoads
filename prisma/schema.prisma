// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
  id Int @id @default(autoincrement())

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  price Int

  title String @db.VarChar(255)
  body  String

  preview String @db.VarChar(255)
  images  String @db.VarChar(255)

  slug String @unique @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  published Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  messages Message[]

  @@index(userId)
}

model Message {
  id     Int  @id @unique
  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model User {
  id        String   @id @unique // not number cause telegram id is BigInteger, so we need parse/unparse
  username  String   @unique
  posts     Post[]
  // profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bans      Ban[]
  role      Role     @default(USER)
}

model Ban {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String?  @default("Нарушение правил")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique @db.VarChar(255)
  title     String   @db.VarChar(255)
  body      String
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  label String @unique @db.VarChar(255)
  image String
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
}
